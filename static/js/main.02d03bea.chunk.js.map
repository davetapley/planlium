{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Range","range","setRange","hasAddons","type","step","min","value","onChange","e","parseInt","target","isStatic","lineOpacity","maxRange","x","y","distance","distanceTo","raw","Math","max","markerOpacity","positions","position","reduce","prev","position_","length","NameInput","props","name","setName","onSubmit","preventDefault","autoFocus","HubListHub","state","setState","key","onMouseOver","onMouseLeave","onClick","className","classNames","active","Block","Icon","HubList","hubs","setSelectionState","rows","map","hub","selectionState","newName","newState","Heading","Controls","HubMarker","popup","markerRef","useRef","useEffect","current","leafletElement","openPopup","closePopup","Marker","ref","opacity","onmouseover","onmouseout","Popup","autoClose","auto","App","center","LatLng","useState","setHubs","name_","state_","hubPositions","markers","lines","n","out","i","j","push","perms","x_","y_","Polyline","toString","isMarginLess","isPaddingLess","Map","zoom","event","latlng","concat","uniqueNamesGenerator","separator","style","TileLayer","attribution","url","isOneFifth","oldName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02d03bea.chunk.js","sourcesContent":["import \"bulma/css/bulma.css\";\nimport \"./App.css\";\nimport classNames from \"classnames\";\nimport React, { useState, useRef, useEffect, ReactNode } from \"react\";\nimport { Map, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport { LeafletMouseEvent, LatLng } from \"leaflet\";\nimport { uniqueNamesGenerator } from \"unique-names-generator\";\n\nimport {\n  Control,\n  Input,\n  Panel,\n  Columns,\n  Column,\n  Section,\n  Field,\n  Label,\n  Button,\n  Title,\n  Container,\n  Subtitle,\n} from \"trunx\";\n\nconst perms = (n: number): number[][] => {\n  const out: number[][] = [];\n  for (var i = 0; i < n; i++) {\n    for (var j = i + 1; j < n; j++) {\n      out.push([i, j]);\n    }\n  }\n  return out;\n};\n\nconst minRange = 500;\n\nconst Range = ({\n  range,\n  setRange,\n}: {\n  range: number;\n  setRange: (n: number) => void;\n}) => {\n  return (\n    <Field hasAddons>\n      <Label>Max Range</Label>\n      <Control>\n        <Input\n          type=\"number\"\n          step={100}\n          min={minRange}\n          value={range}\n          onChange={(e) => setRange(parseInt(e.target.value))}\n        ></Input>\n      </Control>\n      <Control>\n        <Button isStatic>m</Button>\n      </Control>\n    </Field>\n  );\n};\n\nconst lineOpacity = (maxRange: number, x: LatLng, y: LatLng): number => {\n  const distance = x.distanceTo(y);\n\n  const raw = Math.max(0, distance - minRange) / (maxRange - minRange);\n  return 1 - Math.min(1, raw);\n};\n\nconst markerOpacity = (\n  maxRange: number,\n  positions: LatLng[],\n  position: LatLng\n): number => {\n  const sum = positions.reduce((prev, position_) => {\n    return prev + lineOpacity(maxRange, position, position_);\n  }, 0);\n  return 0.5 + sum / positions.length;\n};\n\nconst NameInput = (props: {\n  name: string;\n  setName: (name: string) => void;\n  onSubmit: () => void;\n}) => {\n  const { name, setName, onSubmit } = props;\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        onSubmit();\n      }}\n    >\n      <Field>\n        <Control>\n          <Input\n            type=\"text\"\n            autoFocus\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></Input>\n        </Control>\n      </Field>\n    </form>\n  );\n};\n\ntype HubSelectionState = \"None\" | \"Active\" | \"Editing\";\n\nconst HubListHub = (props: {\n  name: string;\n  state: String;\n  setState: (state: HubSelectionState) => void;\n  setName: (newName: string) => void;\n}) => {\n  const { name, state, setState, setName } = props;\n  return (\n    <div\n      key={name}\n      onMouseOver={() => state !== \"Editing\" && setState(\"Active\")}\n      onMouseLeave={() => setState(\"None\")}\n      onClick={() => setState(\"Editing\")}\n      className={classNames({ active: state === \"Active\" })}\n    >\n      <Panel.Block>\n        <Panel.Icon>\n          <i className=\"fas fa-map-marker\"></i>\n        </Panel.Icon>\n        {state === \"Editing\" ? (\n          <NameInput\n            name={name}\n            setName={setName}\n            onSubmit={() => setState(\"None\")}\n          ></NameInput>\n        ) : (\n          name\n        )}\n      </Panel.Block>\n    </div>\n  );\n};\n\nconst HubList = (props: {\n  hubs: Hub[];\n  setSelectionState: (name: string, state: HubSelectionState) => void;\n  setName: (oldName: string, newName: string) => void;\n}) => {\n  const { hubs, setSelectionState, setName } = props;\n  const rows = hubs.map((hub) => {\n    const { name, selectionState } = hub;\n    return (\n      <HubListHub\n        name={name}\n        state={selectionState}\n        setName={(newName) => setName(name, newName)}\n        setState={(newState) => setSelectionState(name, newState)}\n      ></HubListHub>\n    );\n  });\n  return (\n    <Panel>\n      <Panel.Heading>Hubs</Panel.Heading>\n      {rows}\n    </Panel>\n  );\n};\nconst Controls = ({\n  range,\n  setRange,\n}: {\n  range: number;\n  setRange: (n: number) => void;\n}) => (\n  <Panel>\n    <Panel.Heading>Options</Panel.Heading>\n    <Panel.Block>\n      <Range range={range} setRange={setRange}></Range>\n    </Panel.Block>\n  </Panel>\n);\n\ntype Hub = {\n  name: string;\n  position: LatLng;\n  selectionState: HubSelectionState;\n};\n\ntype HubMarkerProps = {\n  range: number;\n  positions: LatLng[];\n  popup: ReactNode;\n  position: LatLng;\n  selectionState: HubSelectionState;\n  onMouseOver: () => void;\n  onMouseLeave: () => void;\n};\n\nconst HubMarker = ({\n  range,\n  positions,\n  popup,\n  position,\n  selectionState,\n  onMouseOver,\n  onMouseLeave,\n}: HubMarkerProps) => {\n  // Some ref magic to call openPopup and closePopup\n  const markerRef = useRef<Marker | null>(null);\n\n  // Without useEffect you get:\n  //   Warning: Cannot update during an existing state transition (such as within `render`).\n  //   Render methods should be a pure function of props and state.\n  useEffect(() => {\n    if (markerRef.current) {\n      const { leafletElement } = markerRef.current;\n      switch (selectionState) {\n        case \"Active\":\n          leafletElement.openPopup();\n          break;\n        default:\n          leafletElement.closePopup();\n          break;\n      }\n    }\n  }, [markerRef, selectionState]);\n\n  return (\n    <Marker\n      ref={markerRef}\n      position={position}\n      opacity={markerOpacity(range, positions, position)}\n      onmouseover={onMouseOver}\n      onmouseout={onMouseLeave}\n    >\n      <Popup autoClose={false} auto>\n        {popup}\n      </Popup>\n    </Marker>\n  );\n};\n\nconst hubPositions = (hubs: Hub[]) => hubs.map(({ position }) => position);\n\nconst hubName = () =>\n  uniqueNamesGenerator({ separator: \" \", style: \"capital\", length: 2 });\n\nconst App = () => {\n  const center = new LatLng(33.448, -112.074);\n\n  const [range, setRange] = useState<number>(3000);\n  const [hubs, setHubs] = useState<Hub[]>([]);\n\n  const onClick = (event: LeafletMouseEvent): void => {\n    const { latlng } = event;\n    setHubs(\n      hubs.concat({ name: hubName(), position: latlng, selectionState: \"None\" })\n    );\n  };\n  const setSelectionState = (name_: string, state_: HubSelectionState) => {\n    setHubs(\n      hubs.map((hub) =>\n        hub.name === name_ ? { ...hub, selectionState: state_ } : hub\n      )\n    );\n  };\n  const setName = (oldName: string, newName: string) => {\n    setHubs(\n      hubs.map((hub) =>\n        hub.name === oldName ? { ...hub, name: newName } : hub\n      )\n    );\n  };\n\n  const positions = hubPositions(hubs);\n  const markers = hubs.map(({ name, position, selectionState }) => (\n    <HubMarker\n      key={name}\n      range={range}\n      positions={positions}\n      popup={<p>{name}</p>}\n      position={position}\n      selectionState={selectionState}\n      onMouseOver={() => setSelectionState(name, \"Active\")}\n      onMouseLeave={() => setSelectionState(name, \"None\")}\n    ></HubMarker>\n  ));\n\n  const lines = perms(positions.length).map(([x_, y_]) => {\n    const x = positions[x_];\n    const y = positions[y_];\n    return (\n      <Polyline\n        key={[x, y].toString()}\n        positions={[x, y]}\n        opacity={lineOpacity(range, x, y)}\n      ></Polyline>\n    );\n  });\n\n  return (\n    <>\n      <Section isMarginLess isPaddingLess>\n        <Container>\n          <Title>Helium Hub planner</Title>\n          <Subtitle>Map name here</Subtitle>\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <Columns>\n            <Column>\n              <Map center={center} zoom={15} onClick={onClick}>\n                <TileLayer\n                  attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                  url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                />\n                {markers}\n                {lines}\n              </Map>\n            </Column>\n            <Column isOneFifth={true}>\n              <Controls range={range} setRange={setRange} />\n              <HubList\n                hubs={hubs}\n                setName={setName}\n                setSelectionState={setSelectionState}\n              ></HubList>\n            </Column>\n          </Columns>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}